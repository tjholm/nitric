// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: nitric/proto/storage/v1/storage.proto

package storagepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlobEventType int32

const (
	BlobEventType_Created BlobEventType = 0
	BlobEventType_Deleted BlobEventType = 1
)

// Enum value maps for BlobEventType.
var (
	BlobEventType_name = map[int32]string{
		0: "Created",
		1: "Deleted",
	}
	BlobEventType_value = map[string]int32{
		"Created": 0,
		"Deleted": 1,
	}
)

func (x BlobEventType) Enum() *BlobEventType {
	p := new(BlobEventType)
	*p = x
	return p
}

func (x BlobEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_nitric_proto_storage_v1_storage_proto_enumTypes[0].Descriptor()
}

func (BlobEventType) Type() protoreflect.EnumType {
	return &file_nitric_proto_storage_v1_storage_proto_enumTypes[0]
}

func (x BlobEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobEventType.Descriptor instead.
func (BlobEventType) EnumDescriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{0}
}

// Operation
type StoragePreSignUrlRequest_Operation int32

const (
	StoragePreSignUrlRequest_READ  StoragePreSignUrlRequest_Operation = 0
	StoragePreSignUrlRequest_WRITE StoragePreSignUrlRequest_Operation = 1
)

// Enum value maps for StoragePreSignUrlRequest_Operation.
var (
	StoragePreSignUrlRequest_Operation_name = map[int32]string{
		0: "READ",
		1: "WRITE",
	}
	StoragePreSignUrlRequest_Operation_value = map[string]int32{
		"READ":  0,
		"WRITE": 1,
	}
)

func (x StoragePreSignUrlRequest_Operation) Enum() *StoragePreSignUrlRequest_Operation {
	p := new(StoragePreSignUrlRequest_Operation)
	*p = x
	return p
}

func (x StoragePreSignUrlRequest_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoragePreSignUrlRequest_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_nitric_proto_storage_v1_storage_proto_enumTypes[1].Descriptor()
}

func (StoragePreSignUrlRequest_Operation) Type() protoreflect.EnumType {
	return &file_nitric_proto_storage_v1_storage_proto_enumTypes[1]
}

func (x StoragePreSignUrlRequest_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoragePreSignUrlRequest_Operation.Descriptor instead.
func (StoragePreSignUrlRequest_Operation) EnumDescriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{13, 0}
}

// ClientMessages are sent from the service to the nitric server
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique ID of the request/response pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ClientMessage_RegistrationRequest
	//	*ClientMessage_BlobEventResponse
	Content isClientMessage_Content `protobuf_oneof:"content"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ClientMessage) GetContent() isClientMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ClientMessage) GetRegistrationRequest() *RegistrationRequest {
	if x, ok := x.GetContent().(*ClientMessage_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

func (x *ClientMessage) GetBlobEventResponse() *BlobEventResponse {
	if x, ok := x.GetContent().(*ClientMessage_BlobEventResponse); ok {
		return x.BlobEventResponse
	}
	return nil
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_RegistrationRequest struct {
	// Watch for changes on a bucket
	RegistrationRequest *RegistrationRequest `protobuf:"bytes,2,opt,name=registration_request,json=registrationRequest,proto3,oneof"`
}

type ClientMessage_BlobEventResponse struct {
	// Response to a blob event (change to a blob)
	BlobEventResponse *BlobEventResponse `protobuf:"bytes,3,opt,name=blob_event_response,json=blobEventResponse,proto3,oneof"`
}

func (*ClientMessage_RegistrationRequest) isClientMessage_Content() {}

func (*ClientMessage_BlobEventResponse) isClientMessage_Content() {}

// ServerMessages are sent from the nitric server to the service
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique ID of the request/response pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*ServerMessage_RegistrationResponse
	//	*ServerMessage_BlobEventRequest
	Content isServerMessage_Content `protobuf_oneof:"content"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ServerMessage) GetContent() isServerMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ServerMessage) GetRegistrationResponse() *RegistrationResponse {
	if x, ok := x.GetContent().(*ServerMessage_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *ServerMessage) GetBlobEventRequest() *BlobEventRequest {
	if x, ok := x.GetContent().(*ServerMessage_BlobEventRequest); ok {
		return x.BlobEventRequest
	}
	return nil
}

type isServerMessage_Content interface {
	isServerMessage_Content()
}

type ServerMessage_RegistrationResponse struct {
	// Watch for changes on a bucket
	RegistrationResponse *RegistrationResponse `protobuf:"bytes,2,opt,name=registration_response,json=registrationResponse,proto3,oneof"`
}

type ServerMessage_BlobEventRequest struct {
	// Event for a blob in a bucket
	BlobEventRequest *BlobEventRequest `protobuf:"bytes,3,opt,name=blob_event_request,json=blobEventRequest,proto3,oneof"`
}

func (*ServerMessage_RegistrationResponse) isServerMessage_Content() {}

func (*ServerMessage_BlobEventRequest) isServerMessage_Content() {}

type BlobEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Types that are assignable to Event:
	//
	//	*BlobEventRequest_BlobEvent
	Event isBlobEventRequest_Event `protobuf_oneof:"event"`
}

func (x *BlobEventRequest) Reset() {
	*x = BlobEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobEventRequest) ProtoMessage() {}

func (x *BlobEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobEventRequest.ProtoReflect.Descriptor instead.
func (*BlobEventRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *BlobEventRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (m *BlobEventRequest) GetEvent() isBlobEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BlobEventRequest) GetBlobEvent() *BlobEvent {
	if x, ok := x.GetEvent().(*BlobEventRequest_BlobEvent); ok {
		return x.BlobEvent
	}
	return nil
}

type isBlobEventRequest_Event interface {
	isBlobEventRequest_Event()
}

type BlobEventRequest_BlobEvent struct {
	BlobEvent *BlobEvent `protobuf:"bytes,10,opt,name=blob_event,json=blobEvent,proto3,oneof"`
}

func (*BlobEventRequest_BlobEvent) isBlobEventRequest_Event() {}

type BlobEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the blob the event is for
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The type of event that occurred
	Type BlobEventType `protobuf:"varint,2,opt,name=type,proto3,enum=nitric.proto.storage.v1.BlobEventType" json:"type,omitempty"`
}

func (x *BlobEvent) Reset() {
	*x = BlobEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobEvent) ProtoMessage() {}

func (x *BlobEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobEvent.ProtoReflect.Descriptor instead.
func (*BlobEvent) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *BlobEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlobEvent) GetType() BlobEventType {
	if x != nil {
		return x.Type
	}
	return BlobEventType_Created
}

type BlobEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *BlobEventResponse) Reset() {
	*x = BlobEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobEventResponse) ProtoMessage() {}

func (x *BlobEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobEventResponse.ProtoReflect.Descriptor instead.
func (*BlobEventResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *BlobEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bucket to watch
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Event type to listen for
	BlobEventType BlobEventType `protobuf:"varint,2,opt,name=blob_event_type,json=blobEventType,proto3,enum=nitric.proto.storage.v1.BlobEventType" json:"blob_event_type,omitempty"`
	// A blob key prefix to filter events by
	KeyPrefixFilter string `protobuf:"bytes,3,opt,name=key_prefix_filter,json=keyPrefixFilter,proto3" json:"key_prefix_filter,omitempty"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *RegistrationRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *RegistrationRequest) GetBlobEventType() BlobEventType {
	if x != nil {
		return x.BlobEventType
	}
	return BlobEventType_Created
}

func (x *RegistrationRequest) GetKeyPrefixFilter() string {
	if x != nil {
		return x.KeyPrefixFilter
	}
	return ""
}

type RegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the registration
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *RegistrationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to put (create/update) a storage item
type StorageWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nitric name of the bucket to store in
	// this will be automatically resolved to the provider specific bucket identifier.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Key to store the item under
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// bytes array to store
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *StorageWriteRequest) Reset() {
	*x = StorageWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageWriteRequest) ProtoMessage() {}

func (x *StorageWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageWriteRequest.ProtoReflect.Descriptor instead.
func (*StorageWriteRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *StorageWriteRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageWriteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StorageWriteRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// Result of putting a storage item
type StorageWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StorageWriteResponse) Reset() {
	*x = StorageWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageWriteResponse) ProtoMessage() {}

func (x *StorageWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageWriteResponse.ProtoReflect.Descriptor instead.
func (*StorageWriteResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{8}
}

// Request to retrieve a storage item
type StorageReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nitric name of the bucket to retrieve from
	//
	//	this will be automatically resolved to the provider specific bucket identifier.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Key of item to retrieve
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StorageReadRequest) Reset() {
	*x = StorageReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageReadRequest) ProtoMessage() {}

func (x *StorageReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageReadRequest.ProtoReflect.Descriptor instead.
func (*StorageReadRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *StorageReadRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageReadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Returned storage item
type StorageReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The body bytes of the retrieved storage item
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *StorageReadResponse) Reset() {
	*x = StorageReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageReadResponse) ProtoMessage() {}

func (x *StorageReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageReadResponse.ProtoReflect.Descriptor instead.
func (*StorageReadResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{10}
}

func (x *StorageReadResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// Request to delete a storage item
type StorageDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bucket to delete from
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Key of item to delete
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StorageDeleteRequest) Reset() {
	*x = StorageDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDeleteRequest) ProtoMessage() {}

func (x *StorageDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDeleteRequest.ProtoReflect.Descriptor instead.
func (*StorageDeleteRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{11}
}

func (x *StorageDeleteRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Result of deleting a storage item
type StorageDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StorageDeleteResponse) Reset() {
	*x = StorageDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDeleteResponse) ProtoMessage() {}

func (x *StorageDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDeleteResponse.ProtoReflect.Descriptor instead.
func (*StorageDeleteResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{12}
}

// Request to generate a pre-signed URL for a blob to perform a specific operation, such as read or write.
type StoragePreSignUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nitric name of the bucket to retrieve from
	//
	//	this will be automatically resolved to the provider specific bucket identifier.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Key of item to generate the signed URL for.
	// The URL and the token it contains will only be valid for operations on this resource specifically.
	Key       string                             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Operation StoragePreSignUrlRequest_Operation `protobuf:"varint,3,opt,name=operation,proto3,enum=nitric.proto.storage.v1.StoragePreSignUrlRequest_Operation" json:"operation,omitempty"`
	// Expiry defined as as protobuf duration
	Expiry *durationpb.Duration `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *StoragePreSignUrlRequest) Reset() {
	*x = StoragePreSignUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePreSignUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePreSignUrlRequest) ProtoMessage() {}

func (x *StoragePreSignUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePreSignUrlRequest.ProtoReflect.Descriptor instead.
func (*StoragePreSignUrlRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{13}
}

func (x *StoragePreSignUrlRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StoragePreSignUrlRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StoragePreSignUrlRequest) GetOperation() StoragePreSignUrlRequest_Operation {
	if x != nil {
		return x.Operation
	}
	return StoragePreSignUrlRequest_READ
}

func (x *StoragePreSignUrlRequest) GetExpiry() *durationpb.Duration {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type StoragePreSignUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pre-signed url, restricted to the operation, resource and expiry time specified in the request.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *StoragePreSignUrlResponse) Reset() {
	*x = StoragePreSignUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePreSignUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePreSignUrlResponse) ProtoMessage() {}

func (x *StoragePreSignUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePreSignUrlResponse.ProtoReflect.Descriptor instead.
func (*StoragePreSignUrlResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{14}
}

func (x *StoragePreSignUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StorageListBlobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	Prefix     string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *StorageListBlobsRequest) Reset() {
	*x = StorageListBlobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageListBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageListBlobsRequest) ProtoMessage() {}

func (x *StorageListBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageListBlobsRequest.ProtoReflect.Descriptor instead.
func (*StorageListBlobsRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{15}
}

func (x *StorageListBlobsRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageListBlobsRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{16}
}

func (x *Blob) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type StorageListBlobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keys of the blobs in the bucket
	Blobs []*Blob `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *StorageListBlobsResponse) Reset() {
	*x = StorageListBlobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageListBlobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageListBlobsResponse) ProtoMessage() {}

func (x *StorageListBlobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageListBlobsResponse.ProtoReflect.Descriptor instead.
func (*StorageListBlobsResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{17}
}

func (x *StorageListBlobsResponse) GetBlobs() []*Blob {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type StorageExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Key of item to retrieve
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *StorageExistsRequest) Reset() {
	*x = StorageExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageExistsRequest) ProtoMessage() {}

func (x *StorageExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageExistsRequest.ProtoReflect.Descriptor instead.
func (*StorageExistsRequest) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{18}
}

func (x *StorageExistsRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *StorageExistsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type StorageExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *StorageExistsResponse) Reset() {
	*x = StorageExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageExistsResponse) ProtoMessage() {}

func (x *StorageExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nitric_proto_storage_v1_storage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageExistsResponse.ProtoReflect.Descriptor instead.
func (*StorageExistsResponse) Descriptor() ([]byte, []int) {
	return file_nitric_proto_storage_v1_storage_proto_rawDescGZIP(), []int{19}
}

func (x *StorageExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

var File_nitric_proto_storage_v1_storage_proto protoreflect.FileDescriptor

var file_nitric_proto_storage_v1_storage_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xeb, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xeb,
	0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x64, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x62, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x10, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x42,
	0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x26, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x49, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x22, 0x20, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x18, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x4f, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x22, 0x49, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2f,
	0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2a,
	0x29, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x32, 0xe4, 0x06, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2b,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x73, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x31, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x6f, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x26,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x26, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x42, 0xa4, 0x01, 0x0a, 0x1a, 0x69, 0x6f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x17, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0xca,
	0x02, 0x17, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_nitric_proto_storage_v1_storage_proto_rawDescOnce sync.Once
	file_nitric_proto_storage_v1_storage_proto_rawDescData = file_nitric_proto_storage_v1_storage_proto_rawDesc
)

func file_nitric_proto_storage_v1_storage_proto_rawDescGZIP() []byte {
	file_nitric_proto_storage_v1_storage_proto_rawDescOnce.Do(func() {
		file_nitric_proto_storage_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_nitric_proto_storage_v1_storage_proto_rawDescData)
	})
	return file_nitric_proto_storage_v1_storage_proto_rawDescData
}

var file_nitric_proto_storage_v1_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nitric_proto_storage_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_nitric_proto_storage_v1_storage_proto_goTypes = []interface{}{
	(BlobEventType)(0),                      // 0: nitric.proto.storage.v1.BlobEventType
	(StoragePreSignUrlRequest_Operation)(0), // 1: nitric.proto.storage.v1.StoragePreSignUrlRequest.Operation
	(*ClientMessage)(nil),                   // 2: nitric.proto.storage.v1.ClientMessage
	(*ServerMessage)(nil),                   // 3: nitric.proto.storage.v1.ServerMessage
	(*BlobEventRequest)(nil),                // 4: nitric.proto.storage.v1.BlobEventRequest
	(*BlobEvent)(nil),                       // 5: nitric.proto.storage.v1.BlobEvent
	(*BlobEventResponse)(nil),               // 6: nitric.proto.storage.v1.BlobEventResponse
	(*RegistrationRequest)(nil),             // 7: nitric.proto.storage.v1.RegistrationRequest
	(*RegistrationResponse)(nil),            // 8: nitric.proto.storage.v1.RegistrationResponse
	(*StorageWriteRequest)(nil),             // 9: nitric.proto.storage.v1.StorageWriteRequest
	(*StorageWriteResponse)(nil),            // 10: nitric.proto.storage.v1.StorageWriteResponse
	(*StorageReadRequest)(nil),              // 11: nitric.proto.storage.v1.StorageReadRequest
	(*StorageReadResponse)(nil),             // 12: nitric.proto.storage.v1.StorageReadResponse
	(*StorageDeleteRequest)(nil),            // 13: nitric.proto.storage.v1.StorageDeleteRequest
	(*StorageDeleteResponse)(nil),           // 14: nitric.proto.storage.v1.StorageDeleteResponse
	(*StoragePreSignUrlRequest)(nil),        // 15: nitric.proto.storage.v1.StoragePreSignUrlRequest
	(*StoragePreSignUrlResponse)(nil),       // 16: nitric.proto.storage.v1.StoragePreSignUrlResponse
	(*StorageListBlobsRequest)(nil),         // 17: nitric.proto.storage.v1.StorageListBlobsRequest
	(*Blob)(nil),                            // 18: nitric.proto.storage.v1.Blob
	(*StorageListBlobsResponse)(nil),        // 19: nitric.proto.storage.v1.StorageListBlobsResponse
	(*StorageExistsRequest)(nil),            // 20: nitric.proto.storage.v1.StorageExistsRequest
	(*StorageExistsResponse)(nil),           // 21: nitric.proto.storage.v1.StorageExistsResponse
	(*durationpb.Duration)(nil),             // 22: google.protobuf.Duration
}
var file_nitric_proto_storage_v1_storage_proto_depIdxs = []int32{
	7,  // 0: nitric.proto.storage.v1.ClientMessage.registration_request:type_name -> nitric.proto.storage.v1.RegistrationRequest
	6,  // 1: nitric.proto.storage.v1.ClientMessage.blob_event_response:type_name -> nitric.proto.storage.v1.BlobEventResponse
	8,  // 2: nitric.proto.storage.v1.ServerMessage.registration_response:type_name -> nitric.proto.storage.v1.RegistrationResponse
	4,  // 3: nitric.proto.storage.v1.ServerMessage.blob_event_request:type_name -> nitric.proto.storage.v1.BlobEventRequest
	5,  // 4: nitric.proto.storage.v1.BlobEventRequest.blob_event:type_name -> nitric.proto.storage.v1.BlobEvent
	0,  // 5: nitric.proto.storage.v1.BlobEvent.type:type_name -> nitric.proto.storage.v1.BlobEventType
	0,  // 6: nitric.proto.storage.v1.RegistrationRequest.blob_event_type:type_name -> nitric.proto.storage.v1.BlobEventType
	1,  // 7: nitric.proto.storage.v1.StoragePreSignUrlRequest.operation:type_name -> nitric.proto.storage.v1.StoragePreSignUrlRequest.Operation
	22, // 8: nitric.proto.storage.v1.StoragePreSignUrlRequest.expiry:type_name -> google.protobuf.Duration
	18, // 9: nitric.proto.storage.v1.StorageListBlobsResponse.blobs:type_name -> nitric.proto.storage.v1.Blob
	11, // 10: nitric.proto.storage.v1.Storage.Read:input_type -> nitric.proto.storage.v1.StorageReadRequest
	11, // 11: nitric.proto.storage.v1.Storage.ReadStream:input_type -> nitric.proto.storage.v1.StorageReadRequest
	9,  // 12: nitric.proto.storage.v1.Storage.Write:input_type -> nitric.proto.storage.v1.StorageWriteRequest
	9,  // 13: nitric.proto.storage.v1.Storage.WriteStream:input_type -> nitric.proto.storage.v1.StorageWriteRequest
	13, // 14: nitric.proto.storage.v1.Storage.Delete:input_type -> nitric.proto.storage.v1.StorageDeleteRequest
	15, // 15: nitric.proto.storage.v1.Storage.PreSignUrl:input_type -> nitric.proto.storage.v1.StoragePreSignUrlRequest
	17, // 16: nitric.proto.storage.v1.Storage.ListBlobs:input_type -> nitric.proto.storage.v1.StorageListBlobsRequest
	20, // 17: nitric.proto.storage.v1.Storage.Exists:input_type -> nitric.proto.storage.v1.StorageExistsRequest
	2,  // 18: nitric.proto.storage.v1.StorageListener.Listen:input_type -> nitric.proto.storage.v1.ClientMessage
	12, // 19: nitric.proto.storage.v1.Storage.Read:output_type -> nitric.proto.storage.v1.StorageReadResponse
	12, // 20: nitric.proto.storage.v1.Storage.ReadStream:output_type -> nitric.proto.storage.v1.StorageReadResponse
	10, // 21: nitric.proto.storage.v1.Storage.Write:output_type -> nitric.proto.storage.v1.StorageWriteResponse
	10, // 22: nitric.proto.storage.v1.Storage.WriteStream:output_type -> nitric.proto.storage.v1.StorageWriteResponse
	14, // 23: nitric.proto.storage.v1.Storage.Delete:output_type -> nitric.proto.storage.v1.StorageDeleteResponse
	16, // 24: nitric.proto.storage.v1.Storage.PreSignUrl:output_type -> nitric.proto.storage.v1.StoragePreSignUrlResponse
	19, // 25: nitric.proto.storage.v1.Storage.ListBlobs:output_type -> nitric.proto.storage.v1.StorageListBlobsResponse
	21, // 26: nitric.proto.storage.v1.Storage.Exists:output_type -> nitric.proto.storage.v1.StorageExistsResponse
	3,  // 27: nitric.proto.storage.v1.StorageListener.Listen:output_type -> nitric.proto.storage.v1.ServerMessage
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_nitric_proto_storage_v1_storage_proto_init() }
func file_nitric_proto_storage_v1_storage_proto_init() {
	if File_nitric_proto_storage_v1_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nitric_proto_storage_v1_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePreSignUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePreSignUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageListBlobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageListBlobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nitric_proto_storage_v1_storage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nitric_proto_storage_v1_storage_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientMessage_RegistrationRequest)(nil),
		(*ClientMessage_BlobEventResponse)(nil),
	}
	file_nitric_proto_storage_v1_storage_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerMessage_RegistrationResponse)(nil),
		(*ServerMessage_BlobEventRequest)(nil),
	}
	file_nitric_proto_storage_v1_storage_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BlobEventRequest_BlobEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nitric_proto_storage_v1_storage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_nitric_proto_storage_v1_storage_proto_goTypes,
		DependencyIndexes: file_nitric_proto_storage_v1_storage_proto_depIdxs,
		EnumInfos:         file_nitric_proto_storage_v1_storage_proto_enumTypes,
		MessageInfos:      file_nitric_proto_storage_v1_storage_proto_msgTypes,
	}.Build()
	File_nitric_proto_storage_v1_storage_proto = out.File
	file_nitric_proto_storage_v1_storage_proto_rawDesc = nil
	file_nitric_proto_storage_v1_storage_proto_goTypes = nil
	file_nitric_proto_storage_v1_storage_proto_depIdxs = nil
}
